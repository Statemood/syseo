#! /bin/bash

# Created by Statemood, 2013-08-29
# Updated by Statemood, 2014-04-29

fr='\033[0m'

configd="config"
profile="/etc/profile"
rclocal="/etc/rc.local"
crontab="/etc/crontab"
pamlogn="/etc/pam.d/login"
limitcf="/etc/security/limits.conf"
cadfile="/etc/init/control-alt-delete.conf"
sysinfo="CentOS|RHEL|Red Hat Enterprise Linux|Fedora|openSUSE|SLES"
rmusers="adm lp uucp games gopher ftp operator saslauth tcpdump"
rmservs="atd acpid cpuspeed kdump netconsole netfs nfslock rpcgssd rpcidmapd svnserve"
SYSPATH="/usr/local/metis/bin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/sbin"

TIME_SERVER="time.apple.com"

NOTICES="\033[1;41mATTENTION!!!$fr

    1.  Open new terminal window use added user to login this server make sure the ssh settings
        and iptables rules are OK.
        If problem, check /etc/ssh/sshd_config or $ipfw rules.

    2.  When logon the system with new user, try switch to root by 'su -' or 'sudo (-i)' if the
        current user was granted. If problem, check /etc/sudoers and user's info of the group.

    3.  Files /etc/passwd, /etc/shadow, /etc/group, /etc/gshadow are cannot change until you're
        use chattr -i for change the permission.

    4.  When you see this message, crontab and at has been changed to be set up the scheduled
        task only by root. Add username to /etc/cron.allow and /etc/at.allow to change it.

    5.  \033[1mPlease reboot to active changes when your system are ready$fr.
"
USAGEMSGS="\033[1m$0$fr
    -u, --user
	-U, --update
    -w, --wheel
    -s, --sudo  \"username(:NP, NOPASSWD)\"
    -S, --ssh
    -c, --cron
    --use-google-pub-dns
"

msg(){
	echo -e "`date +'%F %T'` $1"
}

sysinit(){
    msg "Set $2 to $(basename $1)"
    echo -e "$2"        >> $1
}

for sysagv in "$@"
do
    case $sysagv in
		-i|--ip)
			ssh_ip="$2"
			shift 2
			;;
        -u|--user)
            usergroup="$2"
            shift 2
            ;;
        -w|--wheel)
            wheeluser="$2"
            shift 2
            ;;
        -s|--sudo)
            sudouser="$2"
            shift 2
            ;;
        -S|--ssh)
            sshusers="$2"
            echo -e "AllowUsers\t $sshusers" >> $config/sshd_config
            shift 2
            ;;
        -c|--cron)
            cronuser="$2"
            shift 2
            ;;
        --use-google-pub-dns)
            echo "nameserver 8.8.8.8" >  /etc/resolv.conf
            echo "nameserver 8.8.4.4" >> /etc/resolv.conf
            ;;
        --help)
            echo -e "$USAGEMSGS"
            exit
            ;;
    esac
done

ls -l /proc/1/exe | grep -q "/systemd$"

test $? = 0 && sys_ver=7 || sys_ver=6

srvctl(){
    action="$1"
    target="$2"
    test $sys_ver = 7 && systemctl $action $target || service $target $action
}

# Set timed out to 1800 seconds. Use 'readonly' to protect 'TMOUT', 'HISTTIMEFORMART'
sysinit "$profile" "export TMOUT=1800"
sysinit "$profile" "export PATH=$SYSPATH"
sysinit "$profile" "export   HISTTIMEFORMAT=\"%F %T \`whoami\`(\`who am i | awk '{print \$1,\$5}'\`) \""
sysinit "$profile" "readonly HISTTIMEFORMAT TMOUT"

test -x $rclocal || chmod 754 $rclocal

# Load modules
sysinit "$rclocal" "/sbin/modprobe bridge"
sysinit "$rclocal" "/sbin/modprobe ip_conntrack"

# Set ulimit values
sysinit "$rclocal" "ulimit -SH 100000"
sysinit "$rclocal" "ulimit -n  100000"

# Load iptables rules
sysinit "$rclocal" "/usr/local/sbin/firewall"

# System time synchronize
sysinit "$rclocal" "/usr/sbin/ntpdate $TIME_SERVER > /dev/null 2>&1 &"
ntpdate=/usr/sbin/ntpdate

test -x $ntpdate || yum install -y ntpdate
$ntpdate $TIME_SERVER
/sbin/hwclock -w

# System time syncronize at everyday 23:00
sysinit "$crontab" "30 23 *  *  *   root    /usr/sbin/ntpdate $TIME_SERVER > /dev/null 2>&1"

# 替换sshd_config文件
sshd_config=/etc/ssh/sshd_config
mv     $sshd_config $sshd_config.default
cp -rf $configd/sshd_config $sshd_config
srvctl restart sshd

cp -rf $configd/sysctl.conf /etc/sysctl.conf
cp -rf $configd/system-auth-ac /etc/pam.d/system-auth-ac

pamlimit=/lib64/security/pam_limits.so
if [ -f $pamlimit ]
then
    grep -q "$pamlimit" $pamlogn
    if [ $? = 1 ]
    then
        sysinit "$pamlogn" "session    required     $pamlimit"
    fi
else
    msg "\033[1;41mError: $pamlimit does not exist\033[0m"
fi

limitsopt="* soft nproc  100000
* hard nproc  100000
* soft nofile 100000
* hard nofile 100000

# End of file"

sed  -i 's/^# End of file//' $limitcf
echo -e "$limitsopt"     >> $limitcf

# Disable 'Crtl+ALT+DEL'
sed -i 's/^exec /#exec /g' $cadfile

# Replace vim config file
cp -rf $configd/vimrc /etc/vimrc

# Set users who has permission to access crontab
test -f /etc/cron.deny && rm -rf /etc/cron.deny
test -f /etc/at.deny   && rm -rf /etc/at.deny
echo -e "root"  > /etc/cron.allow
echo -e "root"  > /etc/at.allow
chmod 600 /etc/cron.allow /etc/at.allow
if [ ! -z "$cronuser" ]
then
    for u in $cronuser
    do
        echo "$u" >> /etc/cron.allow
    done
fi

# Remove unused users
for u in $rmusers
do
    printf "Deleting user %-16s ..." "$u"
    userdel $u > /dev/null
    echo -e "\033[33mdone\033[0m"
done

# Shutdown unused services
for srvs in $rmservs
do
    chkconfig $srvs off > /dev/null 2>&1
done

# Add users
# username:group or username
for ug in $usergroup
do
    echo $ug | grep -q ':'
    if [ $? = 0 ]
    then
        usern=`echo $ug | awk -F ':' '{print $1}'`
        group=`echo $ug | awk -F ':' '{print $2}'`
    else
        usern=$ug
        group=users  # 默认用户组
    fi

    grep -q "$group" /etc/group
    if [ $? != 0 ]
    then
        groupadd    $group
    fi

    useradd -g $group $usern -m

    rsa=$configd/rsa/$usern.pub
    atk=/home/$usern/.ssh/authorized_keys
    if [ -f $rsa ]
    then
        mkdir -p -m 0700 /home/$usern/.ssh
        cp -rf $rsa $atk
        chown -R $usern:$group /home/$usern
    fi
    echo $wheeluser | grep -q $usern
    if [ $? = 0 ]
    then
        usermod -G wheel $usern
    fi

    echo $sudouser   | grep -q $usern
    if [ $? = 0 ]
    then
        echo $sudouser   | egrep -iq "$usern:NP"
            if [ $? = 0 ]
            then
            OPTS="NOPASSWD:ALL"
        else
            OPTS="ALL"
        fi
        echo -e "$usern\tALL=(ALL) $OPTS" >> /etc/sudoers
    fi
done

# Set users who has permission to access command 'su'
echo -e "auth\trequired\tpam_wheel.so use_uid" >> /etc/pam.d/su

# Load iptables rules
ipfw=/usr/local/sbin/firewall
cp -rf iptables.firewall.standard $ipfw
chown root:root $ipfw
chmod 700 $ipfw
$ipfw

msg "iptables rules loaded"

echo -e "$NOTICES"
